<?php
declare(strict_types=1);

namespace Plaisio\Form\Test\Control;

use Plaisio\Form\Cleaner\PruneWhitespaceCleaner;
use Plaisio\Form\Control\FieldSet;
use Plaisio\Form\Control\ForceSubmitControl;
use Plaisio\Form\Control\TextAreaControl;
use Plaisio\Form\RawForm;
use Plaisio\Form\Test\Control\Traits\CommonSimpleControlTest;
use Plaisio\Form\Test\Control\Traits\ImmutableTest;
use Plaisio\Form\Test\PlaisioTestCase;

/**
 * Unit tests for class TextAreaControl.
 */
class TextAreaControlTest extends PlaisioTestCase
{
  //--------------------------------------------------------------------------------------------------------------------
  use ImmutableTest;
  use CommonSimpleControlTest
  {
    CommonSimpleControlTest::stringAttributes as parentStringAttributes;
    CommonSimpleControlTest::integerAttributes as parentIntegerAttributes;
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns all integer valued attributes.
   *
   * @return string[][]
   */
  public function integerAttributes(): array
  {
    $ret = $this->parentIntegerAttributes();

    $ret[] = ['setAttrCols', 'cols'];
    $ret[] = ['setAttrRows', 'rows'];

    return $ret;
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns all string valued attributes.
   *
   * @return string[][]
   */
  public function stringAttributes(): array
  {
    $ret = $this->parentStringAttributes();

    $ret[] = ['setAttrWrap', 'wrap'];

    return $ret;
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Test HTML generated by element.
   */
  public function testHtml(): void
  {
    $input = new TextAreaControl('myInput');

    $fieldSet = new FieldSet('myFieldSet');
    $fieldSet->addFormControl($input);

    $form = new RawForm('myForm');
    $form->addFieldSet($fieldSet);

    $html     = $form->htmlForm();
    $expected = '<form method="post" action="/" class="frm-form"><fieldset class="frm-fieldset"><textarea class="frm-textarea" name="myForm[myFieldSet][myInput]"></textarea></fieldset></form>';
    self::assertSame($expected, $html);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Test cleaning is done before testing value of the form control has changed.
   */
  public function testPruneWhitespaceNoChanged(): void
  {
    $_POST['test'] = '  Hello    World!   ';

    $form     = new RawForm();
    $fieldset = new FieldSet();
    $form->addFieldSet($fieldset);

    $input = new TextAreaControl('test');
    $input->setValue('Hello World!');
    $fieldset->addFormControl($input);

    // Set cleaner for textarea field (default it off).
    $input->addCleaner(PruneWhitespaceCleaner::get());

    $input = new ForceSubmitControl('submit', true);
    $input->setMethod('handleSubmit');
    $fieldset->addFormControl($input);

    $method  = $form->execute();
    $values  = $form->getValues();
    $changed = $form->getChangedControls();

    self::assertTrue($form->isValid());
    self::assertSame('handleSubmit', $method);
    self::assertEquals('Hello World!', $values['test']);
    self::assertArrayNotHasKey('test', $changed);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Test submit value.
   */
  public function testSubmittedValue(): void
  {
    $_POST['test'] = 'Hello World!';

    $form     = new RawForm();
    $fieldset = new FieldSet();
    $form->addFieldSet($fieldset);

    $input = new TextAreaControl('test');
    $input->setValue('Hi World!');
    $fieldset->addFormControl($input);

    $input = new ForceSubmitControl('submit', true);
    $input->setMethod('handleSubmit');
    $fieldset->addFormControl($input);

    $method  = $form->execute();
    $values  = $form->getValues();
    $changed = $form->getChangedControls();

    self::assertTrue($form->isValid());
    self::assertSame('handleSubmit', $method);
    self::assertEquals('Hello World!', $values['test']);
    self::assertNotEmpty($changed['test']);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Test labels are casted to strings.
   */
  public function testWithNumericValues(): void
  {
    $form     = new RawForm();
    $fieldset = new FieldSet();
    $form->addFieldSet($fieldset);

    $input = new TextAreaControl('day_id');
    $input->setValue(pi());
    $fieldset->addFormControl($input);

    $html = $form->htmlForm();

    self::assertNotEmpty($html);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns a concrete instance of TextAreaControl.
   *
   * @param string|null $name The of the control.
   *
   * @return TextAreaControl
   */
  protected function createControl(?string $name): TextAreaControl
  {
    return new TextAreaControl($name);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns a TextAreaControl form control.
   *
   * @param string $name The name of the form control.
   *
   * @return TextAreaControl
   */
  protected function getControl(string $name): TextAreaControl
  {
    return new TextAreaControl($name);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns a valid initial value.
   *
   * @return mixed
   */
  protected function getValidInitialValue()
  {
    return 'Hello, World!';
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns a valid submitted value (different form initial value).
   *
   * @return string
   */
  protected function getValidSubmittedValue(): string
  {
    return 'Bye, bye!';
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns a valid value for a TexControl.
   *
   * @return string
   */
  protected function getValidValue(): string
  {
    return 'Hello, World!';
  }

  //--------------------------------------------------------------------------------------------------------------------
}

//----------------------------------------------------------------------------------------------------------------------
